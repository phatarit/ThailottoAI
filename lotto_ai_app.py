import streamlit as st
import pandas as pd
from collections import Counter
import matplotlib.pyplot as plt
import random

st.set_page_config(page_title="AI ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏´‡∏ß‡∏¢", layout="centered")

st.markdown("""
    <style>
    .stApp { font-family: 'Sarabun', sans-serif; font-size: 18px; }
    .block-container { padding-top: 2rem; padding-bottom: 2rem; max-width: 700px; }
    </style>
""", unsafe_allow_html=True)

st.title("üéØ ‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏´‡∏ß‡∏¢")
st.caption("‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢ Phatarit AI Lab")

# --- SESSION STATE ---
if "lotto_data" not in st.session_state:
    st.session_state.lotto_data = []
if "bulk_done" not in st.session_state:
    st.session_state.bulk_done = False

# ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10 ‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
if len(st.session_state.lotto_data) > 10:
    st.session_state.lotto_data = st.session_state.lotto_data[-10:]

# --- INPUT BLOCK 1: ‡∏´‡∏•‡∏≤‡∏¢‡∏á‡∏ß‡∏î‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å ---
if not st.session_state.bulk_done:
    st.subheader("üßæ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 10 ‡∏á‡∏ß‡∏î)")
    num_rows = 10
    bulk_data = []

    with st.form("bulk_input_form"):
        for i in range(num_rows):
            cols = st.columns(2)
            with cols[0]:
                top = st.text_input(f"‡∏á‡∏ß‡∏î‡∏ó‡∏µ‡πà {i+1} - ‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ö‡∏ô", key=f"top_{i}", max_chars=3)
            with cols[1]:
                bottom = st.text_input(f"‡∏á‡∏ß‡∏î‡∏ó‡∏µ‡πà {i+1} - ‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á", key=f"bottom_{i}", max_chars=2)
            bulk_data.append((top, bottom))

        submitted = st.form_submit_button("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        if submitted:
            count = 0
            for top, bottom in bulk_data:
                if top.isdigit() and bottom.isdigit():
                    st.session_state.lotto_data.append((top.zfill(3), bottom.zfill(2)))
                    count += 1
            st.success(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            st.session_state.bulk_done = True

# --- INPUT BLOCK 2: ‡∏ß‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏∏‡∏î ---
st.subheader("üìã ‡∏ß‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ö‡∏ô ‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á)")
raw_text = st.text_area("‡∏ß‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÄ‡∏ä‡πà‡∏ô:\n123 45\n678 90", height=150)
if st.button("üì• ‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"):
    lines = raw_text.strip().split("\n")
    count = 0
    for line in lines:
        parts = line.strip().split()
        if len(parts) == 2 and parts[0].isdigit() and parts[1].isdigit():
            top, bottom = parts
            st.session_state.lotto_data.append((top.zfill(3), bottom.zfill(2)))
            count += 1
    if count:
        st.success(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß {count} ‡∏á‡∏ß‡∏î")
    else:
        st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á (‡πÄ‡∏ä‡πà‡∏ô 123 45)")

# --- INPUT BLOCK 3: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡∏•‡∏∞‡∏ä‡∏∏‡∏î ---
if st.session_state.bulk_done:
    st.subheader("‚ûï ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ß‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏° (‡∏ó‡∏µ‡∏•‡∏∞‡∏á‡∏ß‡∏î)")
    col1, col2 = st.columns(2)
    with col1:
        top3 = st.text_input("‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ö‡∏ô", key="single_top", max_chars=3)
    with col2:
        bottom2 = st.text_input("‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á", key="single_bottom", max_chars=2)

    if st.button("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 1 ‡∏á‡∏ß‡∏î"):
        if top3.isdigit() and bottom2.isdigit():
            st.session_state.lotto_data.append((top3.zfill(3), bottom2.zfill(2)))
            st.success("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß")
        else:
            st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ---
def detect_common_digits(last, previous):
    return sorted(set("".join(last)) & set("".join(previous)))

def find_missing_digits(data, recent=5):
    used = "".join([a + b for a, b in data[-recent:]])
    return [d for d in "0123456789" if d not in used]

def adjacent_hot_digits(data):
    all_digits = "".join([a + b for a, b in data])
    counter = Counter(all_digits)
    top = counter.most_common(1)[0][0]
    return [(int(top) + i) % 10 for i in [-1, 1]]

def tail_digit_freq(data):
    tails = [a[-1] for a, b in data]
    return Counter(tails).most_common()

def bottom_tail_freq(data):
    tails = [b[-1] for a, b in data]
    return Counter(tails).most_common()

# --- ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏ö ---
st.subheader("üßπ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á")
if st.session_state.lotto_data:
    selected_idx = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö", list(range(1, len(st.session_state.lotto_data)+1)))
    if st.button("üóëÔ∏è ‡∏•‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"):
        st.session_state.lotto_data.pop(selected_idx - 1)
        st.success("‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß")

    if st.button("üî• ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"):
        st.session_state.lotto_data.clear()
        st.success("‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

# --- ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ---
if st.session_state.lotto_data:
    df = pd.DataFrame(st.session_state.lotto_data, columns=["‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ö‡∏ô", "‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á"])
    st.dataframe(df, use_container_width=True)

    all_digits = "".join([a + b for a, b in st.session_state.lotto_data])
    freq = Counter(all_digits).most_common()
    main_digit = freq[0][0]
    main_pairs = [f"{main_digit}{(int(main_digit)+i)%10}" for i in range(1, 5)]

    last_round = st.session_state.lotto_data[-1]
    second_last = st.session_state.lotto_data[-2] if len(st.session_state.lotto_data) >= 2 else None

    st.subheader("üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏•‡∏±‡∏Å")
    st.markdown(f"**‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πà‡∏ô:** `{main_digit}`")
    if second_last:
        shared = detect_common_digits(last_round, second_last)
        st.markdown(f"**‡πÄ‡∏•‡∏Ç‡∏ã‡πâ‡∏≥‡∏à‡∏≤‡∏Å‡∏£‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô:** {' '.join(shared) if shared else '‡πÑ‡∏°‡πà‡∏°‡∏µ'}")

    top_tail = tail_digit_freq(st.session_state.lotto_data)
    bottom_tail = bottom_tail_freq(st.session_state.lotto_data)
    st.markdown(f"**‡πÄ‡∏•‡∏Ç‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏ö‡πà‡∏≠‡∏¢ (‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ö‡∏ô):** `{top_tail[0][0]}` ({top_tail[0][1]} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á)")
    st.markdown(f"**‡πÄ‡∏•‡∏Ç‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏ö‡πà‡∏≠‡∏¢ (‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á):** `{bottom_tail[0][0]}` ({bottom_tail[0][1]} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á)")

    st.subheader("ü•ß ‡∏Å‡∏£‡∏≤‡∏ü‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà (Pie Chart)")
    labels = [item[0] for item in freq]
    sizes = [item[1] for item in freq]
    fig, ax = plt.subplots()
    ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)
    ax.axis('equal')
    st.pyplot(fig)

    st.subheader("üß† ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏π‡∏ï‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
    st.markdown(f"**‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏ô‡∏≤‡∏ô:** {', '.join(find_missing_digits(st.session_state.lotto_data))}")
    st.markdown(f"**‡πÄ‡∏•‡∏Ç‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥:** {', '.join(map(str, adjacent_hot_digits(st.session_state.lotto_data)))}")

    if st.button("üîÆ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"):
        st.markdown("### üîÆ ‡∏ú‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:")
        st.markdown(f"<h2 style='color:red;'>‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πà‡∏ô: {main_digit}</h2>", unsafe_allow_html=True)
        pair_html = " ".join([f"<span style='font-size:28px; color:red;'>{pair}</span>" for pair in main_pairs])
        st.markdown(f"<div>‡πÄ‡∏•‡∏Ç‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: {pair_html}</div>", unsafe_allow_html=True)
        lucky_3 = str(random.randint(0, 9)) + main_digit + str(random.randint(0, 9))
        st.markdown(f"<h4 style='color:red;'>‡πÄ‡∏•‡∏Ç‡πÄ‡∏™‡∏µ‡∏¢‡∏ß‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß: {lucky_3}</h4>", unsafe_allow_html=True)

    csv = df.to_csv(index=False).encode("utf-8-sig")
    st.download_button("üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á", data=csv, file_name="lotto_history.csv", mime="text/csv")
else:
    st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ú‡∏•‡∏´‡∏ß‡∏¢‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏á‡∏ß‡∏î")

st.markdown("---")
st.markdown("üîó ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢ **Phatarit AI Lab** | ‡πÉ‡∏ä‡πâ Streamlit + Python")
