import streamlit as st
import pandas as pd
from collections import Counter
import matplotlib.pyplot as plt

st.set_page_config(page_title="AI ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏´‡∏ß‡∏¢", layout="centered")

st.markdown("""
    <style>
    .stApp {
        font-family: 'Sarabun', sans-serif;
        font-size: 18px;
    }
    .block-container {
        padding-top: 2rem;
        padding-bottom: 2rem;
        max-width: 700px;
    }
    button {
        font-size: 16px !important;
    }
    </style>
""", unsafe_allow_html=True)

st.title("üéØ ‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏´‡∏ß‡∏¢")
st.caption("‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢ Phatarit AI Lab | ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏•‡∏≠‡∏á")

# ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
if "lotto_data" not in st.session_state:
    st.session_state.lotto_data = []

st.subheader("üìù ‡∏Å‡∏£‡∏≠‡∏Å‡∏ú‡∏•‡∏´‡∏ß‡∏¢‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á")
col1, col2 = st.columns(2)
with col1:
    top3 = st.text_input("‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ö‡∏ô", max_chars=3)
with col2:
    bottom2 = st.text_input("‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á", max_chars=2)

col3, col4 = st.columns(2)
with col3:
    if st.button("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"):
        if top3.isdigit() and bottom2.isdigit():
            st.session_state.lotto_data.append((top3.zfill(3), bottom2.zfill(2)))
            st.success("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß")
        else:
            st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
with col4:
    if st.button("üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"):
        st.session_state.lotto_data = []
        st.success("üßπ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß")

# ------------------------------- #
def detect_consecutive_doubles(data):
    recent = [x[0] for x in data[-3:]]
    return list(set([n for n in recent if n[0] == n[1] or n[1] == n[2]]))

def find_missing_digits(data, recent=10):
    used = "".join([a+b for a, b in data[-recent:]])
    return [d for d in "0123456789" if d not in used]

def adjacent_hot_digits(data):
    all_digits = "".join([a+b for a, b in data])
    counter = Counter(all_digits)
    top = counter.most_common(1)[0][0]
    return [(int(top)+i)%10 for i in [-1, 1]]

# ------------------------------- #
if st.session_state.lotto_data:
    df = pd.DataFrame(st.session_state.lotto_data, columns=["‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ö‡∏ô", "‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á"])
    st.dataframe(df, use_container_width=True)

    all_digits = "".join([a + b for a, b in st.session_state.lotto_data])
    freq = Counter(all_digits).most_common()

    main_digit = freq[0][0]
    main_pairs = [f"{main_digit}{(int(main_digit)+i)%10}" for i in range(1, 5)]

    last_round = st.session_state.lotto_data[-1]
    second_last = st.session_state.lotto_data[-2] if len(st.session_state.lotto_data) >= 2 else None
    repeated = [n for n in last_round if last_round.count(n) > 1]

    st.subheader("üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏•‡∏±‡∏Å")
    st.markdown(f"**‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πà‡∏ô:** `{main_digit}`")
    st.markdown(f"**‡πÄ‡∏•‡∏Ç‡πÄ‡∏ö‡∏¥‡πâ‡∏•:** {' '.join(repeated) if repeated else '‡πÑ‡∏°‡πà‡∏°‡∏µ'}")
    if second_last:
        match = set(last_round) & set(second_last)
        st.markdown(f"**‡πÄ‡∏•‡∏Ç‡∏ã‡πâ‡∏≥‡∏à‡∏≤‡∏Å‡∏£‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô:** {' '.join(match) if match else '‡πÑ‡∏°‡πà‡∏°‡∏µ'}")

    start_digits = [a[0] for a, _ in st.session_state.lotto_data]
    end_digits = [a[-1] for a, _ in st.session_state.lotto_data]
    start_freq = Counter(start_digits).most_common(1)
    end_freq = Counter(end_digits).most_common(1)
    st.markdown(f"**‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏ö‡πà‡∏≠‡∏¢:** {start_freq[0][0]} | **‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏ö‡πà‡∏≠‡∏¢:** {end_freq[0][0]}")

    # üîÅ Pie Chart
    st.subheader("üìà ‡∏Å‡∏£‡∏≤‡∏ü‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà (Pie Chart)")
    labels = [item[0] for item in freq]
    sizes = [item[1] for item in freq]
    fig, ax = plt.subplots()
    ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)
    ax.axis('equal')
    st.pyplot(fig)

    # üß† ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏π‡∏ï‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
    st.subheader("üß† ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏π‡∏ï‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
    st.markdown(f"**‡πÄ‡∏•‡∏Ç‡πÄ‡∏ö‡∏¥‡πâ‡∏• 3 ‡∏á‡∏ß‡∏î‡∏ï‡∏¥‡∏î:** {', '.join(detect_consecutive_doubles(st.session_state.lotto_data)) or '‡πÑ‡∏°‡πà‡∏°‡∏µ'}")
    st.markdown(f"**‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏ô‡∏≤‡∏ô:** {', '.join(find_missing_digits(st.session_state.lotto_data))}")
    st.markdown(f"**‡πÄ‡∏•‡∏Ç‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥:** {', '.join(map(str, adjacent_hot_digits(st.session_state.lotto_data)))}")

    if st.button("üß† ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"):
        st.markdown("### üîÆ ‡∏ú‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢:")
        st.success(f"‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πà‡∏ô: `{main_digit}`")
        st.info(f"‡πÄ‡∏•‡∏Ç‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: `{', '.join(main_pairs)}`")

    # üì§ Export CSV
    csv = df.to_csv(index=False).encode("utf-8-sig")
    st.download_button("üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô CSV", data=csv, file_name="lotto_history.csv", mime="text/csv")
else:
    st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ú‡∏•‡∏´‡∏ß‡∏¢‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏á‡∏ß‡∏î‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")

st.markdown("---")
st.markdown("üîó ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢ **Phatarit AI Lab** | ‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ Streamlit + Python")
