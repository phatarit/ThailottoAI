import streamlit as st
import pandas as pd
from collections import Counter, defaultdict
from itertools import permutations

st.set_page_config(page_title="ThaiLottoAI v2.2", page_icon="üéØ")
st.title("üéØ ThaiLottoAI ‚Äì Multi-Formula Analyzer with Hit-Rate")

# ---------- Input ----------
st.markdown("‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á: ‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ö‡∏ô ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ ‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á ‡πÄ‡∏ä‡πà‡∏ô `774 81` ‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ï‡πà‡∏≠‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏á‡∏ß‡∏î")
data = st.text_area("üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á", height=250)

extra = []
with st.expander("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏•‡∏∞‡∏á‡∏ß‡∏î"):
    for i in range(1, 6):
        v = st.text_input(f"‡∏á‡∏ß‡∏î #{i}", key=f"row_{i}")
        if v:
            extra.append(v)

raw_lines = [l for l in (data.splitlines() + extra) if l.strip()]
draws = []
for idx, line in enumerate(raw_lines, 1):
    try:
        top, bottom = line.strip().split()
        if len(top) == 3 and len(bottom) == 2 and top.isdigit() and bottom.isdigit():
            draws.append((top, bottom))
        else:
            st.warning(f"‡∏Ç‡πâ‡∏≤‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î {idx}: ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‚Üí {line}")
    except ValueError:
        st.warning(f"‡∏Ç‡πâ‡∏≤‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î {idx}: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏ö‡πà‡∏á‡∏ö‡∏ô/‡∏•‡πà‡∏≤‡∏á ‚Üí {line}")

if len(draws) < 40:
    st.info("‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 40 ‡∏á‡∏ß‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏π‡∏ï‡∏£")
    st.stop()

df = pd.DataFrame(draws, columns=["‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ö‡∏ô", "‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á"])
st.success(f"‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {len(df)} ‡∏á‡∏ß‡∏î")
st.dataframe(df, use_container_width=True)

# ---------- Helper ----------
def exp_hot_single(history, window=27, alpha=0.8):
    scores = Counter()
    recent = history[-window:] if len(history) >= window else history
    for n_back, (top, bottom) in enumerate(reversed(recent)):
        w = alpha ** n_back
        for d in top + bottom:
            scores[d] += w
    return max(scores, key=scores.get)

def build_transitions(history):
    trans = defaultdict(Counter)
    for prev, curr in zip(history[:-1], history[1:]):
        trans[prev[1]][curr[1]] += 1
    return trans

def markov_predict(history, topk=20):
    trans = build_transitions(history)
    last = history[-1][1]
    cand = [c for c, _ in trans[last].most_common(topk)]
    if len(cand) < topk:
        overall = Counter()
        for d in trans.values():
            overall.update(d)
        for c, _ in overall.most_common():
            if c not in cand:
                cand.append(c)
            if len(cand) == topk:
                break
    return cand[:topk]

def hot_digits(history, window=10, n=5):
    rec = history[-window:] if len(history) >= window else history
    digits = "".join("".join(pair) for pair in rec)
    return [d for d, _ in Counter(digits).most_common(n)]

def run_digits(history):
    return list(history[-1][1])

def sum_mod(history):
    return str(sum(map(int, history[-1][0])) % 10)

def hybrid_predict(history, pool_size=10, topk=30):
    pool = []
    pool.extend(run_digits(history))
    pool.append(sum_mod(history))
    pool.extend(hot_digits(history, 5, 4))
    pool.extend(hot_digits(history, len(history), 4))
    pool = list(dict.fromkeys(pool))[:pool_size]

    # weight scores 30 draws
    scores = Counter()
    recent = history[-30:]
    for idx, (top, bottom) in enumerate(recent):
        w = 1.0 - (idx / 30) * 0.9
        for d in top + bottom:
            scores[d] += w

    perms = ["".join(p) for p in permutations(pool, 3) if len(set(p)) == 3]
    perms.sort(key=lambda x: -(scores[x[0]] + scores[x[1]] + scores[x[2]]))
    return perms[:topk]

# ---------- Evaluator ----------
def walk_forward(history, predictor, hit_fn, start):
    hits = total = 0
    for i in range(start, len(history)):
        past = history[:i]
        pred = predictor(past)
        if hit_fn(pred, history[i]):
            hits += 1
        total += 1
    return hits / total if total else 0.0

hit_single = lambda pred, act: pred in act[0] or pred in act[1]
hit_two = lambda preds, act: act[1] in preds or act[1][::-1] in preds
hit_three = lambda preds, act: act[0] in preds

single_acc = walk_forward(draws, exp_hot_single, hit_single, 27)
two_acc = walk_forward(draws, lambda h: markov_predict(h, 20), hit_two, 40)
three_acc = walk_forward(draws, lambda h: hybrid_predict(h, 10, 30), hit_three, 40)

# ---------- Predict next ----------
next_single = exp_hot_single(draws)
next_two = markov_predict(draws, 20)
next_three = hybrid_predict(draws, 10, 30)

st.header("üîÆ ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏á‡∏ß‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")
c1, c2 = st.columns(2)
with c1:
    st.subheader("‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡πà‡∏ô")
    st.markdown(f"**{next_single}**")
    st.caption(f"Hit-rate ~ {single_acc*100:.1f}%")
with c2:
    st.subheader("‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á (20 ‡∏ä‡∏∏‡∏î)")
    st.code(" ".join(next_two))
    st.caption(f"Hit-rate ~ {two_acc*100:.1f}%  (‡∏ñ‡∏∑‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ)")

st.subheader("‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ö‡∏ô (30 ‡∏ä‡∏∏‡∏î)")
st.code(" ".join(next_three))
st.caption(f"Hit-rate ~ {three_acc*100:.1f}%  (‡πÉ‡∏ô 30 ‡∏ä‡∏∏‡∏î)")

with st.expander("üìä ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á"):
    st.markdown(
        "* **Walk-forward back-test** ‚Äì ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏á‡∏ß‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ ‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡∏±‡∏î‡∏ú‡∏•‡∏ó‡∏µ‡∏•‡∏∞‡∏á‡∏ß‡∏î
"
        "* **‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á** ‡∏ô‡∏±‡∏ö‡∏ñ‡∏π‡∏Å‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏•‡∏Ç‡∏ï‡∏£‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏π‡πà‡∏Å‡∏•‡∏±‡∏ö (AB/BA)
"
        "* ‡∏™‡∏π‡∏ï‡∏£:  EXP-HOT (27), Markov top20, Hybrid pool10 ‚Üí 30 permutations"
    )

st.caption("¬© 2025 ThaiLottoAI v2.2")
