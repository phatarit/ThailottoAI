# ThaiLottoAI ‚Äì Predict Thai Government Lottery (3‚Äëdigit on top / 2‚Äëdigit bottom)
import streamlit as st
import pandas as pd
from collections import Counter
from itertools import permutations
from datetime import datetime, timedelta
import os, traceback

st.set_page_config(page_title="ThaiLottoAI", page_icon="üéØ")
st.title("üéØ ThaiLottoAI ‚Äì Advanced Thai Lottery Analyzer")

st.markdown(
    """‡πÉ‡∏ä‡πâ‡∏™‡∏π‡∏ï‡∏£‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ 6 ‡∏ä‡∏±‡πâ‡∏ô (Run, Sum‚Äëmod, Hot, Pair‚ÄëReverse, HL/OE Switch, No‚ÄëDouble)
    ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏•‡∏Ç **‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ö‡∏ô** ‡πÅ‡∏•‡∏∞ **‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á** ‡πÇ‡∏î‡∏¢‡∏≠‡∏≤‡∏®‡∏±‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
    ‚Ä¢ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏•‡∏∞‡∏´‡∏•‡∏≤‡∏¢‡∏á‡∏ß‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
    ‚Ä¢ ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: `774 81` (‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ö‡∏ô ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ ‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á) ‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ï‡πà‡∏≠‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏á‡∏ß‡∏î""")

# ---------- INPUT AREA ----------
data_input = st.text_area("üìã ‡∏ß‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î (*‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ö‡∏ô ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ ‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á*)", height=250)

extra_inputs = []
with st.expander("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏•‡∏∞‡∏á‡∏ß‡∏î"):
    for i in range(1, 6):
        v = st.text_input(f"‡∏á‡∏ß‡∏î #{i}", key=f"row_{i}")
        if v: extra_inputs.append(v)

# Merge & clean lines
raw_lines = [l for l in (data_input.splitlines() + extra_inputs) if l.strip()]
draws = []
for idx, line in enumerate(raw_lines, 1):
    try:
        top, bottom = line.strip().split()
        if len(top) == 3 and len(bottom) == 2 and top.isdigit() and bottom.isdigit():
            draws.append((top, bottom))
        else:
            st.warning(f"‡∏Ç‡πâ‡∏≤‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î {idx}: ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‚Üí {line}")
    except ValueError:
        st.warning(f"‡∏Ç‡πâ‡∏≤‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î {idx}: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏ö‡πà‡∏á‡∏ö‡∏ô/‡∏•‡πà‡∏≤‡∏á ‚Üí {line}")

if len(draws) < 5:
    st.info("‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 5 ‡∏á‡∏ß‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
    st.stop()

df = pd.DataFrame(draws, columns=["‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ö‡∏ô", "‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á"])
st.success(f"‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à {len(df)} ‡∏á‡∏ß‡∏î")
st.dataframe(df, use_container_width=True)

# ---------- CORE FORMULAS ----------
def predict(df: pd.DataFrame, two_limit: int = 12, three_limit: int = 10):
    all_digits = "".join("".join(pair) for pair in df.values)
    hot = [d for d, _ in Counter(all_digits).most_common(5)]

    last_top, last_bottom = df.iloc[-1]
    run_digits = list(last_bottom)

    sum_mod = str(sum(map(int, last_top)) % 10)
    pair_rev = last_bottom[::-1]

    # candidate pool (unique, ordered)
    pool = []
    for d in run_digits + [sum_mod] + hot:
        if d not in pool:
            pool.append(d)
    # pad to at least 6 digits
    while len(pool) < 6:
        pool.append(str((int(pool[-1]) + 1) % 10))

    # two‚Äëdigit prediction
    want_odd = int(last_bottom[-1]) % 2 == 0  # if last even ‚Üí want odd
    two_list = []
    for a in pool:
        for b in pool:
            if a == b:         # No‚ÄëDouble (‡∏û‡∏±‡∏Å‡πÄ‡∏ö‡∏¥‡πâ‡∏•)
                continue
            if want_odd and int(b) % 2 == 0:
                continue
            two_list.append(a + b)
    two_list = two_list[:two_limit]

    # three‚Äëdigit prediction
    three_list = []
    for perm in permutations(pool, 3):
        if len(set(perm)) == 3:
            three_list.append("".join(perm))
            if len(three_list) == three_limit:
                break

    meta = {
        "pool": pool,
        "sum_mod": sum_mod,
        "pair_reverse": pair_rev,
        "want_odd_bottom": want_odd
    }
    return two_list, three_list, meta

# ---------- PREDICTION ----------
two_digits, three_digits, meta = predict(df)

st.header("üîÆ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á (‡∏™‡∏π‡∏ï‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á)")
st.subheader("‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß (‡∏ö‡∏ô/‡∏•‡πà‡∏≤‡∏á)")
st.code(" ".join(two_digits))

st.subheader("‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ö‡∏ô")
st.code(" ".join(three_digits))

with st.expander("‚ÑπÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏™‡∏π‡∏ï‡∏£ (debug)"):
    st.write("*Candidate Digits*:", meta["pool"])
    st.write("SUM‚ÄëMOD 10 ‡∏Ç‡∏≠‡∏á‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:", meta["sum_mod"])
    st.write("‡∏Ñ‡∏π‡πà‡∏Å‡∏•‡∏±‡∏ö (‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î):", meta["pair_reverse"])
    st.write("‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏´‡∏•‡∏±‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏µ‡πà? ‚Üí", meta["want_odd_bottom"])

st.caption("¬© 2025 ThaiLottoAI ‚Äì minimal demo")
